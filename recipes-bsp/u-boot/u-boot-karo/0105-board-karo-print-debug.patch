From 35efa0909d4b16350b5bb08091919e1210c99a5b Mon Sep 17 00:00:00 2001
From: Victor Voronin <viktor.voronin@evologics.de>
Date: Wed, 2 Aug 2023 08:46:13 +0200
Subject: [PATCH] board/karo: print debug

---
 board/karo/common/fdt.c  | 86 ++++++++++++++++++++--------------------
 board/karo/common/karo.h |  2 +
 board/karo/common/mmc.c  |  8 ++--
 board/karo/common/nand.c | 20 +++++-----
 board/karo/tx6/flash.c   | 10 ++---
 board/karo/tx6/ltc3676.c |  2 +-
 board/karo/tx6/tx6qdl.c  | 58 +++++++++++++--------------
 board/karo/tx6/tx6ul.c   | 54 ++++++++++++-------------
 8 files changed, 121 insertions(+), 119 deletions(-)

diff --git a/board/karo/common/fdt.c b/board/karo/common/fdt.c
index 909f0ca770..17619f383f 100644
--- a/board/karo/common/fdt.c
+++ b/board/karo/common/fdt.c
@@ -43,7 +43,7 @@ static void karo_set_fdtsize(void *fdt)
 	if (fdtsize == fdt_totalsize(fdt)) {
 		return;
 	}
-	debug("FDT size changed from %u to %u\n",
+	debug_karo("FDT size changed from %u to %u\n",
 		fdtsize, fdt_totalsize(fdt));
 	setenv_hex("fdtsize", fdt_totalsize(fdt));
 }
@@ -72,10 +72,10 @@ static void *karo_fdt_load_dtb(void)
 	}
 
 	if (fdt_check_header(fdt)) {
-		debug("No valid DTB in flash\n");
+		debug_karo("No valid DTB in flash\n");
 		return NULL;
 	}
-	debug("Using DTB from flash\n");
+	debug_karo("Using DTB from flash\n");
 	karo_set_fdtsize(fdt);
 	return fdt;
 }
@@ -86,7 +86,7 @@ void karo_fdt_move_fdt(void)
 	unsigned long fdt_addr = getenv_ulong("fdtaddr", 16, 0);
 
 	if (working_fdt) {
-		debug("DTB already loaded\n");
+		debug_karo("DTB already loaded\n");
 		return;
 	}
 
@@ -113,12 +113,12 @@ void karo_fdt_move_fdt(void)
 		} else {
 			printf("No DTB in flash; using default DTB\n");
 		}
-		debug("Checking FDT header @ %p\n", fdt);
+		debug_karo("Checking FDT header @ %p\n", fdt);
 		if (fdt_check_header(fdt)) {
 			printf("ERROR: No valid DTB found at %p\n", fdt);
 			return;
 		}
-		debug("Moving FDT from %p..%p to %08lx..%08lx\n",
+		debug_karo("Moving FDT from %p..%p to %08lx..%08lx\n",
 			fdt, fdt + fdt_totalsize(fdt) - 1,
 			fdt_addr, fdt_addr + fdt_totalsize(fdt) - 1);
 		memmove((void *)fdt_addr, fdt, fdt_totalsize(fdt));
@@ -133,7 +133,7 @@ void karo_fdt_remove_node(void *blob, const char *node)
 	int off = fdt_path_offset(blob, node);
 	int ret;
 
-	debug("Removing node '%s' from DT\n", node);
+	debug_karo("Removing node '%s' from DT\n", node);
 
 	if (off < 0) {
 		printf("Could not find node '%s': %s\n", node,
@@ -151,7 +151,7 @@ void karo_fdt_enable_node(void *blob, const char *node, int enable)
 {
 	int off = fdt_path_offset(blob, node);
 
-	debug("%sabling node '%s'\n", enable ? "En" : "Dis", node);
+	debug_karo("%sabling node '%s'\n", enable ? "En" : "Dis", node);
 	if (off < 0) {
 		printf("Could not find node '%s': %s\n", node,
 			fdt_strerror(off));
@@ -168,7 +168,7 @@ static void fdt_disable_tp_node(void *blob, const char *name)
 	int offs = fdt_node_offset_by_compatible(blob, -1, name);
 
 	while (offs >= 0) {
-		debug("Disabling node '%s'\n", name);
+		debug_karo("Disabling node '%s'\n", name);
 		fdt_set_node_status(blob, offs, FDT_STATUS_DISABLED, 0);
 		offs = fdt_node_offset_by_compatible(blob, offs, name);
 	}
@@ -213,7 +213,7 @@ static int karo_fdt_disable_node_phandle(void *blob, const char *parent,
 
 	ph = fdt_getprop(blob, off, name, NULL);
 	if (ph == NULL) {
-		debug("Failed to find '%s' phandle in node '%s'\n", name,
+		debug_karo("Failed to find '%s' phandle in node '%s'\n", name,
 			fdt_get_name(blob, off, NULL));
 		return -FDT_ERR_NOTFOUND;
 	}
@@ -236,24 +236,24 @@ void karo_fdt_fixup_usb_otg(void *blob, const char *node, const char *phy,
 	int disable_otg = 0;
 	int disable_phy_pins = 0;
 
-	debug("OTG mode is '%s'\n", otg_mode ? otg_mode : "<UNSET>");
+	debug_karo("OTG mode is '%s'\n", otg_mode ? otg_mode : "<UNSET>");
 
 	off = fdt_path_offset(blob, node);
 	if (off < 0) {
-		debug("Failed to find node %s\n", node);
+		debug_karo("Failed to find node %s\n", node);
 		return;
 	}
 
 	if (otg_mode && (strcasecmp(otg_mode, "device") == 0 ||
 				strcasecmp(otg_mode, "gadget") == 0)) {
-		debug("Setting dr_mode to 'peripheral'\n");
+		debug_karo("Setting dr_mode to 'peripheral'\n");
 		ret = fdt_setprop_string(blob, off, "dr_mode", "peripheral");
 		disable_phy_pins = 1;
 	} else if (otg_mode && strcasecmp(otg_mode, "host") == 0) {
-		debug("Setting dr_mode to 'host'\n");
+		debug_karo("Setting dr_mode to 'host'\n");
 		ret = fdt_setprop_string(blob, off, "dr_mode", "host");
 	} else if (otg_mode && strcasecmp(otg_mode, "otg") == 0) {
-		debug("Setting dr_mode to 'otg'\n");
+		debug_karo("Setting dr_mode to 'otg'\n");
 		ret = fdt_setprop_string(blob, off, "dr_mode", "otg");
 	} else {
 		if (otg_mode && strcasecmp(otg_mode, "none") != 0)
@@ -286,14 +286,14 @@ void karo_fdt_fixup_usb_otg(void *blob, const char *node, const char *phy,
 		}
 		ph = fdt_getprop(blob, off, phy_supply, NULL);
 		if (ph == NULL) {
-			debug("Failed to find '%s' phandle in node '%s'\n",
+			debug_karo("Failed to find '%s' phandle in node '%s'\n",
 				phy_supply, fdt_get_name(blob, off, NULL));
 			ret = -FDT_ERR_NOTFOUND;
 			goto disable_otg;
 		}
 		ret = fdt_node_offset_by_phandle(blob, fdt32_to_cpu(*ph));
 		if (ret > 0) {
-			debug("Disabling node %s via phandle %s:%s\n",
+			debug_karo("Disabling node %s via phandle %s:%s\n",
 				fdt_get_name(blob, ret, NULL),
 				fdt_get_name(blob, off, NULL), phy_supply);
 			ret = fdt_set_node_status(blob, ret,
@@ -305,12 +305,12 @@ void karo_fdt_fixup_usb_otg(void *blob, const char *node, const char *phy,
 
 disable_otg:
 	if (disable_otg) {
-		debug("Disabling '%s'\n", fdt_get_name(blob, off, NULL));
+		debug_karo("Disabling '%s'\n", fdt_get_name(blob, off, NULL));
 		ret = fdt_set_node_status(blob, off, FDT_STATUS_DISABLED, 0);
 		if (ret > 0)
 			ret = karo_fdt_disable_node_phandle(blob, node, phy);
 	} else if (disable_phy_pins) {
-		debug("Removing '%s' from node '%s'\n", phy_supply,
+		debug_karo("Removing '%s' from node '%s'\n", phy_supply,
 			fdt_get_name(blob, off, NULL));
 		ret = fdt_delprop(blob, off, phy_supply);
 	}
@@ -319,7 +319,7 @@ out:
 	if (ret && ret != -FDT_ERR_NOTFOUND)
 		printf("Failed to update usbotg: %s\n", fdt_strerror(ret));
 	else
-		debug("node '%s' updated\n", node);
+		debug_karo("node '%s' updated\n", node);
 	karo_set_fdtsize(blob);
 }
 
@@ -336,16 +336,16 @@ static inline int karo_fdt_flexcan_enabled(void *blob)
 		int off = fdt_path_offset(blob, can_ifs[i]);
 
 		if (off < 0) {
-			debug("node '%s' not found\n", can_ifs[i]);
+			debug_karo("node '%s' not found\n", can_ifs[i]);
 			continue;
 		}
 		status = fdt_getprop(blob, off, "status", NULL);
 		if (status && strcmp(status, "okay") == 0) {
-			debug("%s is enabled\n", can_ifs[i]);
+			debug_karo("%s is enabled\n", can_ifs[i]);
 			return 1;
 		}
 	}
-	debug("can driver is disabled\n");
+	debug_karo("can driver is disabled\n");
 	return 0;
 }
 
@@ -384,14 +384,14 @@ void karo_fdt_fixup_flexcan(void *blob, int xcvr_present)
 	if (xcvr_present) {
 		if (karo_fdt_flexcan_enabled(blob)) {
 			if (!is_lvds()) {
-				debug("Changing LCD to use 23bits only\n");
+				debug_karo("Changing LCD to use 23bits only\n");
 				karo_fdt_set_lcd_pins(blob, "lcdif-23bit-pins-a");
 				/* handle legacy alias name */
 				karo_fdt_set_lcd_pins(blob, "lcdif_23bit_pins_a");
 				xcvr_status = NULL;
 			}
 		} else if (!is_lvds()) {
-			debug("Changing LCD to use 24bits\n");
+			debug_karo("Changing LCD to use 24bits\n");
 			karo_fdt_set_lcd_pins(blob, "lcdif-24bit-pins-a");
 			/* handle legacy alias name */
 			karo_fdt_set_lcd_pins(blob, "lcdif_24bit_pins_a");
@@ -415,7 +415,7 @@ void karo_fdt_fixup_flexcan(void *blob, int xcvr_present)
 		karo_fdt_enable_node(blob, "can1", 0);
 
 	if (xcvr_status) {
-		debug("Disabling CAN XCVR\n");
+		debug_karo("Disabling CAN XCVR\n");
 		ret = fdt_find_and_setprop(blob, "reg-can-xcvr", "status",
 					xcvr_status, strlen(xcvr_status) + 1, 1);
 		if (ret == -FDT_ERR_NOTFOUND || ret == -FDT_ERR_BADPATH)
@@ -445,7 +445,7 @@ void karo_fdt_del_prop(void *blob, const char *compat, u32 offs,
 		if (fdt32_to_cpu(*reg) == offs)
 			break;
 	}
-	debug("Removing property '%s' from node %s@%x\n",
+	debug_karo("Removing property '%s' from node %s@%x\n",
 		propname, compat, offs);
 	fdt_delprop(blob, offset, propname);
 
@@ -523,19 +523,19 @@ static int fdt_update_native_fb_mode(void *blob, int off)
 		printf("Warning: Failed to increase FDT size: %s\n",
 			fdt_strerror(ret));
 	}
-	debug("Creating phandle at offset %d\n", off);
+	debug_karo("Creating phandle at offset %d\n", off);
 	ph = fdt_create_phandle(blob, off);
 	if (!ph) {
 		printf("Failed to create phandle for video timing\n");
 		return -ENOMEM;
 	}
 
-	debug("phandle of %s @ %06x=%04x\n", fdt_get_name(blob, off, NULL),
+	debug_karo("phandle of %s @ %06x=%04x\n", fdt_get_name(blob, off, NULL),
 		off, ph);
 	off = fdt_parent_offset(blob, off);
 	if (off < 0)
 		return off;
-	debug("parent offset=%06x\n", off);
+	debug_karo("parent offset=%06x\n", off);
 	ret = fdt_setprop_cell(blob, off, "native-mode", ph);
 	if (ret)
 		printf("Failed to set property 'native-mode': %s\n",
@@ -550,14 +550,14 @@ static int karo_fdt_find_video_timings(void *blob)
 	const char *subnode = "display-timings";
 
 	if (off < 0) {
-		debug("Could not find node 'display' in FDT: %s\n",
+		debug_karo("Could not find node 'display' in FDT: %s\n",
 			fdt_strerror(off));
 		return off;
 	}
 
 	off = fdt_subnode_offset(blob, off, subnode);
 	if (off < 0) {
-		debug("Could not find node '%s' in FDT: %s\n", subnode,
+		debug_karo("Could not find node '%s' in FDT: %s\n", subnode,
 			fdt_strerror(off));
 	}
 	return off;
@@ -579,7 +579,7 @@ static int karo_fdt_check_panel_name(const char *pn, const char *name, int len)
 
 static int karo_fdt_find_panel(const void *blob, int off, const char *name)
 {
-	debug("Searching panel '%s'\n", name);
+	debug_karo("Searching panel '%s'\n", name);
 	while (off > 0) {
 		const char *pn;
 		int d = 1;
@@ -591,13 +591,13 @@ static int karo_fdt_find_panel(const void *blob, int off, const char *name)
 		if (d < 1)
 			return -EINVAL;
 		if (d > 2) {
-			debug("Skipping node @ %04x %s depth %d\n", off,
+			debug_karo("Skipping node @ %04x %s depth %d\n", off,
 				fdt_get_name(blob, off, NULL), d);
 			continue;
 		}
 
 		pn = fdt_get_name(blob, off, NULL);
-		debug("Checking node name '%s'\n", pn);
+		debug_karo("Checking node name '%s'\n", pn);
 		if (strcasecmp(pn, name) == 0)
 			break;
 		pn = fdt_getprop(blob, off, "u-boot,panel-name", &len);
@@ -607,7 +607,7 @@ static int karo_fdt_find_panel(const void *blob, int off, const char *name)
 			break;
 	}
 	if (off > 0)
-		debug("Found LCD panel: '%s' @ off %03x\n",
+		debug_karo("Found LCD panel: '%s' @ off %03x\n",
 		      fdt_get_name(blob, off, NULL), off);
 	return off;
 }
@@ -657,7 +657,7 @@ int karo_fdt_create_fb_mode(void *blob, const char *name,
 
 	ret = fdt_subnode_offset(blob, off, subnode);
 	if (ret < 0) {
-		debug("Could not find node '%s' in FDT: %s\n", subnode,
+		debug_karo("Could not find node '%s' in FDT: %s\n", subnode,
 			fdt_strerror(ret));
 		ret = fdt_add_subnode(blob, off, subnode);
 		if (ret < 0) {
@@ -764,7 +764,7 @@ static int karo_fixup_panel_timing(void *fdt, int dest, int src)
 			       name, len);
 			return -EINVAL;
 		}
-		debug("setting '%s' to <0x%08x>\n", name, be32_to_cpup(val));
+		debug_karo("setting '%s' to <0x%08x>\n", name, be32_to_cpup(val));
 
 		restart = !fdt_getprop(fdt, dest, name, &len);
 		restart |= len != sizeof(u32);
@@ -808,7 +808,7 @@ int karo_fdt_update_fb_mode(void *blob, const char *name,
 		return off;
 
 	if (name == NULL) {
-		debug("Disabling node '%s' at %03x\n",
+		debug_karo("Disabling node '%s' at %03x\n",
 			fdt_get_name(blob, off, NULL), off);
 		ret = fdt_set_node_status(blob, off, FDT_STATUS_DISABLED, 0);
 		if (ret)
@@ -827,7 +827,7 @@ int karo_fdt_update_fb_mode(void *blob, const char *name,
 
 	off = fdt_subnode_offset(blob, off, subnode);
 	if (off < 0) {
-		debug("Could not find node '%s' in FDT: %s\n", subnode,
+		debug_karo("Could not find node '%s' in FDT: %s\n", subnode,
 			fdt_strerror(off));
 		return off;
 	}
@@ -880,7 +880,7 @@ int karo_fdt_update_fb_mode(void *blob, const char *name,
 			pn = strdup(name);
 			if (!pn)
 				return -ENOMEM;
-			debug("%s@%d: Updating 'compatible' property of '%s' from '%s' to '%s'\n",
+			debug_karo("%s@%d: Updating 'compatible' property of '%s' from '%s' to '%s'\n",
 			      __func__, __LINE__, fdt_get_name(blob, panel_off, NULL),
 			      (char *)fdt_getprop(blob, panel_off, "compatible", NULL),
 			      pn);
@@ -944,7 +944,7 @@ u8 karo_fdt_get_lvds_channels(const void *blob)
 
 		status = fdt_getprop(blob, off, "status", NULL);
 		if (status && strcmp(status, "okay") == 0) {
-			debug("%s is enabled\n", lvds_chans[i]);
+			debug_karo("%s is enabled\n", lvds_chans[i]);
 			lvds_chan_mask |= 1 << i;
 		}
 	}
@@ -979,7 +979,7 @@ int karo_fdt_get_backlight_polarity(const void *blob)
 	if (!prop)
 		printf("'pwms' property not found\n");
 	else
-		debug("'pwms' property has len %d\n", len);
+		debug_karo("'pwms' property has len %d\n", len);
 
 	len /= sizeof(u32);
 	if (prop && len > 3) {
diff --git a/board/karo/common/karo.h b/board/karo/common/karo.h
index 06427e49d4..d12809fc68 100644
--- a/board/karo/common/karo.h
+++ b/board/karo/common/karo.h
@@ -25,6 +25,8 @@ struct fb_videomode;
 #define is_lvds()			0
 #endif
 
+#define debug_karo(fmt, args...)	printf(fmt, ##args)
+
 void env_cleanup(void);
 
 #ifdef CONFIG_OF_LIBFDT
diff --git a/board/karo/common/mmc.c b/board/karo/common/mmc.c
index 6143e15756..16be18dff7 100644
--- a/board/karo/common/mmc.c
+++ b/board/karo/common/mmc.c
@@ -152,7 +152,7 @@ int karo_load_mmc_part(const char *part, void *addr, size_t len)
 
 		memset(addr, 0xee, len);
 
-		debug("Reading 0x"LBAF" blks from MMC partition %d offset 0x"LBAF" to %p\n",
+		debug_karo("Reading 0x"LBAF" blks from MMC partition %d offset 0x"LBAF" to %p\n",
 			blk_cnt, partnum, part_info.start, addr);
 		ret = mmc->block_dev.block_read(devno, part_info.start, blk_cnt, addr);
 		if (ret == 0) {
@@ -160,12 +160,12 @@ int karo_load_mmc_part(const char *part, void *addr, size_t len)
 			ret = -EIO;
 			goto out;
 		}
-		debug("Read %u (%u) byte from partition '%s' @ offset 0x"LBAF"\n",
+		debug_karo("Read %u (%u) byte from partition '%s' @ offset 0x"LBAF"\n",
 			ret * mmc->read_bl_len, len, part, part_info.start);
 	} else if (partnum == 0) {
 		loff_t len_read;
 
-		debug("Trying to read (%u) byte from file '%s' in mmc partition %d\n",
+		debug_karo("Trying to read (%u) byte from file '%s' in mmc partition %d\n",
 			len, part, partnum);
 		ret = fs_read(part, (ulong)addr, 0, len, &len_read);
 		if (ret < 0) {
@@ -173,7 +173,7 @@ int karo_load_mmc_part(const char *part, void *addr, size_t len)
 				len, part, partnum, ret);
 			goto out;
 		}
-		debug("Read %llu bytes from %s\n", len_read, part);
+		debug_karo("Read %llu bytes from %s\n", len_read, part);
 	} else {
 		ret = partnum;
 		goto out;
diff --git a/board/karo/common/nand.c b/board/karo/common/nand.c
index 6d303f01d8..d0bccf7aa9 100644
--- a/board/karo/common/nand.c
+++ b/board/karo/common/nand.c
@@ -43,12 +43,12 @@ int karo_load_nand_part(const char *part, void *addr, size_t len)
 	struct part_info *part_info;
 	u8 part_num;
 
-	debug("Initializing mtd_parts\n");
+	debug_karo("Initializing mtd_parts\n");
 	ret = mtdparts_init();
 	if (ret)
 		return ret;
 
-	debug("Trying to find NAND partition '%s'\n", part);
+	debug_karo("Trying to find NAND partition '%s'\n", part);
 	ret = find_dev_and_part(part, &dev, &part_num, &part_info);
 	if (ret) {
 		printf("Failed to find flash partition '%s': %d\n",
@@ -56,13 +56,13 @@ int karo_load_nand_part(const char *part, void *addr, size_t len)
 
 		return ret;
 	}
-	debug("Found partition '%s': offset=%08llx size=%08llx\n",
+	debug_karo("Found partition '%s': offset=%08llx size=%08llx\n",
 		part, (u64)part_info->offset, (u64)part_info->size);
 
 	if (part_info->size < len)
 		len = part_info->size;
 
-	debug("Reading NAND partition '%s' to %p\n", part, addr);
+	debug_karo("Reading NAND partition '%s' to %p\n", part, addr);
 	ret = nand_read_skip_bad(&nand_info[0], part_info->offset, &len,
 				NULL, part_info->size, addr);
 	if (ret) {
@@ -70,7 +70,7 @@ int karo_load_nand_part(const char *part, void *addr, size_t len)
 		return ret;
 	}
 
-	debug("Read %u byte from partition '%s' @ offset %08llx\n",
+	debug_karo("Read %u byte from partition '%s' @ offset %08llx\n",
 		len, part, (u64)part_info->offset);
 	return 0;
 }
@@ -108,12 +108,12 @@ int do_fbdump(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 		return CMD_RET_FAILURE;
 	}
 
-	debug("Initializing mtd_parts\n");
+	debug_karo("Initializing mtd_parts\n");
 	ret = mtdparts_init();
 	if (ret)
 		return CMD_RET_FAILURE;
 
-	debug("Trying to find NAND partition '%s'\n", part);
+	debug_karo("Trying to find NAND partition '%s'\n", part);
 	ret = find_dev_and_part(part, &dev, &part_num,
 				&part_info);
 	if (ret) {
@@ -121,14 +121,14 @@ int do_fbdump(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 			part, ret);
 		return CMD_RET_FAILURE;
 	}
-	debug("Found partition '%s': offset=%08x size=%08x\n",
+	debug_karo("Found partition '%s': offset=%08x size=%08x\n",
 		part, part_info->offset, part_info->size);
 	if (part_info->size < fbsize) {
 		printf("Error: partition '%s' smaller than frame buffer size: %u\n",
 			part, fbsize);
 		return CMD_RET_FAILURE;
 	}
-	debug("Writing framebuffer %p to NAND partition '%s'\n",
+	debug_karo("Writing framebuffer %p to NAND partition '%s'\n",
 		addr, part);
 
 	ret = erase_flash(part_info->offset, fbsize);
@@ -145,7 +145,7 @@ int do_fbdump(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
 		return CMD_RET_FAILURE;
 	}
 
-	debug("Wrote %u byte from %p to partition '%s' @ offset %08x\n",
+	debug_karo("Wrote %u byte from %p to partition '%s' @ offset %08x\n",
 		fbsize, addr, part, part_info->offset);
 
 	return CMD_RET_SUCCESS;
diff --git a/board/karo/tx6/flash.c b/board/karo/tx6/flash.c
index dcd9416496..560ededdbc 100644
--- a/board/karo/tx6/flash.c
+++ b/board/karo/tx6/flash.c
@@ -162,18 +162,18 @@ static int find_contig_space(int block, int num_blocks, int max_blocks)
 	int found = 0;
 	int last = block + max_blocks;
 
-	debug("Searching %u contiguous blocks from %d..%d\n",
+	debug_karo("Searching %u contiguous blocks from %d..%d\n",
 		num_blocks, block, block + max_blocks - 1);
 	for (; block < last; block++) {
 		if (nand_block_isbad(mtd, block * mtd->erasesize)) {
 			skip += found + 1;
 			found = 0;
-			debug("Skipping %u blocks to %u\n",
+			debug_karo("Skipping %u blocks to %u\n",
 				skip, block + 1);
 		} else {
 			found++;
 			if (found >= num_blocks) {
-				debug("Found %u good blocks from %d..%d\n",
+				debug_karo("Found %u good blocks from %d..%d\n",
 					found, block - found + 1, block);
 				return skip;
 			}
@@ -183,7 +183,7 @@ static int find_contig_space(int block, int num_blocks, int max_blocks)
 }
 
 #define offset_of(p, m)		((void *)&(p)->m - (void *)(p))
-#define pr_fcb_val(p, n)	debug("%-24s[%02x]=%08x(%d)\n", #n, offset_of(p, n), (p)->n, (p)->n)
+#define pr_fcb_val(p, n)	debug_karo("%-24s[%02x]=%08x(%d)\n", #n, offset_of(p, n), (p)->n, (p)->n)
 
 static struct mx6_fcb *create_fcb(void *buf, int fw1_start_block,
 				int fw2_start_block, int fw_num_blocks)
@@ -282,7 +282,7 @@ static int find_fcb(void *ref, int page)
 		goto out;
 	}
 	if (memcmp(buf, ref, mtd->writesize) == 0) {
-		debug("Found FCB in page %u (%08x)\n",
+		debug_karo("Found FCB in page %u (%08x)\n",
 			page, page * mtd->writesize);
 		ret = 1;
 	}
diff --git a/board/karo/tx6/ltc3676.c b/board/karo/tx6/ltc3676.c
index d78a935d99..7a008dbe20 100644
--- a/board/karo/tx6/ltc3676.c
+++ b/board/karo/tx6/ltc3676.c
@@ -134,7 +134,7 @@ static int tx6_rev_2(void)
 	struct fuse_bank5_regs *fuse = (void *)ocotp->bank[5].fuse_regs;
 	u32 pad_settings = readl(&fuse->pad_settings);
 
-	debug("Fuse pad_settings @ %p = %02x\n",
+	debug_karo("Fuse pad_settings @ %p = %02x\n",
 		&fuse->pad_settings, pad_settings);
 	return pad_settings & 1;
 }
diff --git a/board/karo/tx6/tx6qdl.c b/board/karo/tx6/tx6qdl.c
index a6fcccd419..a3340b22b9 100644
--- a/board/karo/tx6/tx6qdl.c
+++ b/board/karo/tx6/tx6qdl.c
@@ -188,7 +188,7 @@ static void tx6_i2c_recover(void)
 	    (readl(&sda_regs->gpio_psr) & SDA_BIT))
 		return;
 
-	debug("Clearing I2C bus\n");
+	debug_karo("Clearing I2C bus\n");
 	if (!(readl(&scl_regs->gpio_psr) & SCL_BIT)) {
 		printf("I2C SCL stuck LOW\n");
 		bad++;
@@ -215,7 +215,7 @@ static void tx6_i2c_recover(void)
 		for (i = 0; i < 18; i++) {
 			u32 reg = readl(&scl_regs->gpio_dr) ^ SCL_BIT;
 
-			debug("%sing SCL\n",
+			debug_karo("%sing SCL\n",
 			      (reg & SCL_BIT) ? "Sett" : "Clear");
 			writel(reg, &scl_regs->gpio_dr);
 			udelay(5);
@@ -496,7 +496,7 @@ static inline char tx6_mem_suffix(void)
 {
 	size_t mem_idx = (TX6_FLASH_SZ * 3) + TX6_DDR_SZ;
 
-	debug("TX6_DDR_SZ=%d TX6_FLASH_SZ=%d idx=%d\n",
+	debug_karo("TX6_DDR_SZ=%d TX6_FLASH_SZ=%d idx=%d\n",
 	      TX6_DDR_SZ, TX6_FLASH_SZ, mem_idx);
 
 	if (mem_idx >= ARRAY_SIZE(tx6_mem_table))
@@ -520,18 +520,18 @@ static int tx6_pmic_probe(void)
 {
 	int i;
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	for (i = 0; i < ARRAY_SIZE(tx6_mod_revs); i++) {
 		u8 i2c_addr = tx6_mod_revs[i].addr;
 		int ret = i2c_probe(i2c_addr);
 
 		if (ret == 0) {
-			debug("I2C probe succeeded for addr 0x%02x\n",
+			debug_karo("I2C probe succeeded for addr 0x%02x\n",
 			      i2c_addr);
 			return i;
 		}
-		debug("I2C probe returned %d for addr 0x%02x\n", ret, i2c_addr);
+		debug_karo("I2C probe returned %d for addr 0x%02x\n", ret, i2c_addr);
 	}
 	return -EINVAL;
 }
@@ -542,7 +542,7 @@ static int tx6_mipi(void)
 	struct fuse_bank4_regs *fuse = (void *)ocotp->bank[4].fuse_regs;
 	u32 gp1 = readl(&fuse->gp1);
 
-	debug("Fuse gp1 @ %p = %08x\n", &fuse->gp1, gp1);
+	debug_karo("Fuse gp1 @ %p = %08x\n", &fuse->gp1, gp1);
 	return gp1 & 1;
 }
 
@@ -551,7 +551,7 @@ int board_init(void)
 	int ret;
 	int pmic_id;
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	pmic_id = tx6_pmic_probe();
 	if (pmic_id >= 0 && pmic_id < ARRAY_SIZE(tx6_mod_revs))
@@ -597,7 +597,7 @@ int board_init(void)
 
 int dram_init(void)
 {
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	/* dram_init must store complete ramsize in gd->ram_size */
 	gd->ram_size = get_ram_size((void *)CONFIG_SYS_SDRAM_BASE,
@@ -607,7 +607,7 @@ int dram_init(void)
 
 void dram_init_banksize(void)
 {
-	debug("%s@%d: chip_size=%u (%u bit bus width)\n", __func__, __LINE__,
+	debug_karo("%s@%d: chip_size=%u (%u bit bus width)\n", __func__, __LINE__,
 	      CONFIG_SYS_SDRAM_CHIP_SIZE, CONFIG_SYS_SDRAM_BUS_WIDTH);
 	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
 	gd->bd->bi_dram[0].size = get_ram_size((void *)PHYS_SDRAM_1,
@@ -713,7 +713,7 @@ int board_mmc_getcd(struct mmc *mmc)
 	if (cfg->cd_gpio < 0)
 		return 1;
 
-	debug("SD card %d is %spresent (GPIO %d)\n",
+	debug_karo("SD card %d is %spresent (GPIO %d)\n",
 	      cfg - tx6qdl_esdhc_cfg,
 	      gpio_get_value(cfg->cd_gpio) ? "NOT " : "",
 	      cfg->cd_gpio);
@@ -724,7 +724,7 @@ int board_mmc_init(bd_t *bis)
 {
 	int i;
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	for (i = 0; i < ARRAY_SIZE(tx6qdl_esdhc_cfg); i++) {
 		struct mmc *mmc;
@@ -745,7 +745,7 @@ int board_mmc_init(bd_t *bis)
 			}
 		}
 
-		debug("%s: Initializing MMC slot %d\n", __func__, i);
+		debug_karo("%s: Initializing MMC slot %d\n", __func__, i);
 		fsl_esdhc_initialize(bis, &cfg->cfg);
 
 		mmc = find_mmc_device(i);
@@ -768,7 +768,7 @@ int board_eth_init(bd_t *bis)
 {
 	int ret;
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	/* delay at least 21ms for the PHY internal POR signal to deassert */
 	udelay(22000);
@@ -1068,7 +1068,7 @@ void lcd_enable(void)
 	if (lcd_enabled) {
 		karo_load_splashimage(1);
 
-		debug("Switching LCD on\n");
+		debug_karo("Switching LCD on\n");
 		gpio_set_value(TX6_LCD_PWR_GPIO, 1);
 		udelay(100);
 		gpio_set_value(TX6_LCD_RST_GPIO, 1);
@@ -1089,7 +1089,7 @@ void lcd_disable(void)
 void lcd_panel_disable(void)
 {
 	if (lcd_enabled) {
-		debug("Switching LCD off\n");
+		debug_karo("Switching LCD off\n");
 		gpio_set_value(TX6_LCD_BACKLIGHT_GPIO,
 			       !lcd_backlight_polarity());
 		gpio_set_value(TX6_LCD_RST_GPIO, 0);
@@ -1159,12 +1159,12 @@ void lcd_ctrl_init(void *lcdbase)
 	unsigned long di_clk_rate = 65000000;
 
 	if (!lcd_enabled) {
-		debug("LCD disabled\n");
+		debug_karo("LCD disabled\n");
 		goto disable;
 	}
 
 	if (had_ctrlc() || (wrsr & WRSR_TOUT)) {
-		debug("Disabling LCD\n");
+		debug_karo("Disabling LCD\n");
 		lcd_enabled = 0;
 		setenv("splashimage", NULL);
 		goto disable;
@@ -1174,14 +1174,14 @@ void lcd_ctrl_init(void *lcdbase)
 	lcd_bl_polarity = karo_fdt_get_backlight_polarity(working_fdt);
 
 	if (video_mode == NULL) {
-		debug("Disabling LCD\n");
+		debug_karo("Disabling LCD\n");
 		lcd_enabled = 0;
 		goto disable;
 	}
 	vm = video_mode;
 	if (karo_fdt_get_fb_mode(working_fdt, video_mode, &fb_mode) == 0) {
 		p = &fb_mode;
-		debug("Using video mode from FDT\n");
+		debug_karo("Using video mode from FDT\n");
 		vm += strlen(vm);
 		if (fb_mode.xres > panel_info.vl_col ||
 		    fb_mode.yres > panel_info.vl_row) {
@@ -1193,17 +1193,17 @@ void lcd_ctrl_init(void *lcdbase)
 		}
 	}
 	if (p->name != NULL)
-		debug("Trying compiled-in video modes\n");
+		debug_karo("Trying compiled-in video modes\n");
 	while (p->name != NULL) {
 		if (strcmp(p->name, vm) == 0) {
-			debug("Using video mode: '%s'\n", p->name);
+			debug_karo("Using video mode: '%s'\n", p->name);
 			vm += strlen(vm);
 			break;
 		}
 		p++;
 	}
 	if (*vm != '\0')
-		debug("Trying to decode video_mode: '%s'\n", vm);
+		debug_karo("Trying to decode video_mode: '%s'\n", vm);
 	while (*vm != '\0') {
 		if (*vm >= '0' && *vm <= '9') {
 			char *end;
@@ -1310,13 +1310,13 @@ void lcd_ctrl_init(void *lcdbase)
 					(p->yres + p->upper_margin +
 					 p->lower_margin + p->vsync_len) /
 					1000);
-	debug("Pixel clock set to %lu.%03lu MHz\n",
+	debug_karo("Pixel clock set to %lu.%03lu MHz\n",
 	      PICOS2KHZ(p->pixclock) / 1000, PICOS2KHZ(p->pixclock) % 1000);
 
 	if (p != &fb_mode) {
 		int ret;
 
-		debug("Creating new display-timing node from '%s'\n",
+		debug_karo("Creating new display-timing node from '%s'\n",
 		      video_mode);
 		ret = karo_fdt_create_fb_mode(working_fdt, video_mode, p);
 		if (ret)
@@ -1367,7 +1367,7 @@ void lcd_ctrl_init(void *lcdbase)
 			gpr2 |= (1 << 5) | (1 << 7);
 		gpr2 |= (lvds_chan_mask & 1) ? 1 << 0 : 0;
 		gpr2 |= (lvds_chan_mask & 2) ? 3 << 2 : 0;
-		debug("writing %08x to GPR2[%08x]\n", gpr2,
+		debug_karo("writing %08x to GPR2[%08x]\n", gpr2,
 		      IOMUXC_BASE_ADDR + 8);
 		writel(gpr2, IOMUXC_BASE_ADDR + 8);
 
@@ -1378,7 +1378,7 @@ void lcd_ctrl_init(void *lcdbase)
 	if (karo_load_splashimage(0) == 0) {
 		int ret;
 
-		debug("Initializing LCD controller\n");
+		debug_karo("Initializing LCD controller\n");
 		ret = ipuv3_fb_init(p, 0, pix_fmt,
 				    is_lvds() ? DI_PCLK_LDB : DI_PCLK_PLL3,
 				    di_clk_rate, -1);
@@ -1387,7 +1387,7 @@ void lcd_ctrl_init(void *lcdbase)
 			lcd_enabled = 0;
 		}
 	} else {
-		debug("Skipping initialization of LCD controller\n");
+		debug_karo("Skipping initialization of LCD controller\n");
 	}
 	return;
 
@@ -1460,7 +1460,7 @@ int board_late_init(void)
 {
 	const char *baseboard;
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	env_cleanup();
 
diff --git a/board/karo/tx6/tx6ul.c b/board/karo/tx6/tx6ul.c
index ceabaa2a5a..1f520678ad 100644
--- a/board/karo/tx6/tx6ul.c
+++ b/board/karo/tx6/tx6ul.c
@@ -205,7 +205,7 @@ static void tx6ul_i2c_recover(void)
 	    (readl(&sda_regs->gpio_psr) & SDA_BIT))
 		return;
 
-	debug("Clearing I2C bus\n");
+	debug_karo("Clearing I2C bus\n");
 	if (!(readl(&scl_regs->gpio_psr) & SCL_BIT)) {
 		printf("I2C SCL stuck LOW\n");
 		bad++;
@@ -229,7 +229,7 @@ static void tx6ul_i2c_recover(void)
 		for (i = 0; i < 18; i++) {
 			u32 reg = readl(&scl_regs->gpio_dr) ^ SCL_BIT;
 
-			debug("%sing SCL\n", (reg & SCL_BIT) ? "Sett" : "Clear");
+			debug_karo("%sing SCL\n", (reg & SCL_BIT) ? "Sett" : "Clear");
 			writel(reg, &scl_regs->gpio_dr);
 			udelay(5);
 			if (reg & SCL_BIT) {
@@ -515,7 +515,7 @@ int board_init(void)
 	else if (is_cpu_type(MXC_CPU_MX6ULL))
 		f = '8';
 
-	debug("%s@%d: cpurev=%08x\n", __func__, __LINE__, cpurev);
+	debug_karo("%s@%d: cpurev=%08x\n", __func__, __LINE__, cpurev);
 
 	printf("Board: Ka-Ro TXUL-%c01%c\n", f, tx6ul_mem_suffix());
 
@@ -552,7 +552,7 @@ int board_init(void)
 
 int dram_init(void)
 {
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	/* dram_init must store complete ramsize in gd->ram_size */
 	gd->ram_size = get_ram_size((void *)CONFIG_SYS_SDRAM_BASE,
@@ -562,7 +562,7 @@ int dram_init(void)
 
 void dram_init_banksize(void)
 {
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	gd->bd->bi_dram[0].start = PHYS_SDRAM_1;
 	gd->bd->bi_dram[0].size = get_ram_size((void *)PHYS_SDRAM_1,
@@ -648,7 +648,7 @@ int board_mmc_getcd(struct mmc *mmc)
 	if (cfg->cd_gpio < 0)
 		return 1;
 
-	debug("SD card %d is %spresent (GPIO %d)\n",
+	debug_karo("SD card %d is %spresent (GPIO %d)\n",
 	      cfg - tx6ul_esdhc_cfg,
 	      gpio_get_value(cfg->cd_gpio) ? "NOT " : "",
 	      cfg->cd_gpio);
@@ -659,7 +659,7 @@ int board_mmc_init(bd_t *bis)
 {
 	int i;
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 #ifndef CONFIG_ENV_IS_IN_MMC
 	if (!(gd->flags & GD_FLG_ENV_READY)) {
@@ -686,7 +686,7 @@ int board_mmc_init(bd_t *bis)
 			}
 		}
 
-		debug("%s: Initializing MMC slot %d\n", __func__, i);
+		debug_karo("%s: Initializing MMC slot %d\n", __func__, i);
 		fsl_esdhc_initialize(bis, &cfg->cfg);
 
 		mmc = find_mmc_device(i);
@@ -1103,7 +1103,7 @@ void lcd_enable(void)
 	if (lcd_enabled) {
 		karo_load_splashimage(1);
 
-		debug("Switching LCD on\n");
+		debug_karo("Switching LCD on\n");
 		gpio_set_value(TX6UL_LCD_PWR_GPIO, 1);
 		udelay(100);
 		gpio_set_value(TX6UL_LCD_RST_GPIO, 1);
@@ -1134,7 +1134,7 @@ void lcd_ctrl_init(void *lcdbase)
 	int xres_set = 0, yres_set = 0, bpp_set = 0, refresh_set = 0;
 
 	if (!lcd_enabled) {
-		debug("LCD disabled\n");
+		debug_karo("LCD disabled\n");
 		return;
 	}
 
@@ -1154,7 +1154,7 @@ void lcd_ctrl_init(void *lcdbase)
 	vm = video_mode;
 	if (karo_fdt_get_fb_mode(working_fdt, video_mode, &fb_mode) == 0) {
 		p = &fb_mode;
-		debug("Using video mode from FDT\n");
+		debug_karo("Using video mode from FDT\n");
 		vm += strlen(vm);
 		if (fb_mode.xres > panel_info.vl_col ||
 			fb_mode.yres > panel_info.vl_row) {
@@ -1166,17 +1166,17 @@ void lcd_ctrl_init(void *lcdbase)
 		}
 	}
 	if (p->name != NULL)
-		debug("Trying compiled-in video modes\n");
+		debug_karo("Trying compiled-in video modes\n");
 	while (p->name != NULL) {
 		if (strcmp(p->name, vm) == 0) {
-			debug("Using video mode: '%s'\n", p->name);
+			debug_karo("Using video mode: '%s'\n", p->name);
 			vm += strlen(vm);
 			break;
 		}
 		p++;
 	}
 	if (*vm != '\0')
-		debug("Trying to decode video_mode: '%s'\n", vm);
+		debug_karo("Trying to decode video_mode: '%s'\n", vm);
 	while (*vm != '\0') {
 		if (*vm >= '0' && *vm <= '9') {
 			char *end;
@@ -1275,13 +1275,13 @@ void lcd_ctrl_init(void *lcdbase)
 					(p->yres + p->upper_margin +
 					 p->lower_margin + p->vsync_len) /
 					1000);
-	debug("Pixel clock set to %lu.%03lu MHz\n",
+	debug_karo("Pixel clock set to %lu.%03lu MHz\n",
 	      PICOS2KHZ(p->pixclock) / 1000, PICOS2KHZ(p->pixclock) % 1000);
 
 	if (p != &fb_mode) {
 		int ret;
 
-		debug("Creating new display-timing node from '%s'\n",
+		debug_karo("Creating new display-timing node from '%s'\n",
 		      video_mode);
 		ret = karo_fdt_create_fb_mode(working_fdt, video_mode, p);
 		if (ret)
@@ -1293,7 +1293,7 @@ void lcd_ctrl_init(void *lcdbase)
 	imx_iomux_v3_setup_multiple_pads(stk5_lcd_pads,
 					 ARRAY_SIZE(stk5_lcd_pads));
 
-	debug("video format: %ux%u-%u@%u\n", p->xres, p->yres,
+	debug_karo("video format: %ux%u-%u@%u\n", p->xres, p->yres,
 	      color_depth, refresh);
 
 	if (karo_load_splashimage(0) == 0) {
@@ -1307,12 +1307,12 @@ void lcd_ctrl_init(void *lcdbase)
 			 p->vsync_len, p->sync, p->pixclock, color_depth);
 		setenv("videomode", vmode);
 
-		debug("Initializing LCD controller\n");
+		debug_karo("Initializing LCD controller\n");
 		lcdif_clk_enable();
 		video_hw_init();
 		setenv("videomode", NULL);
 	} else {
-		debug("Skipping initialization of LCD controller\n");
+		debug_karo("Skipping initialization of LCD controller\n");
 	}
 }
 #else
@@ -1349,14 +1349,14 @@ static void stk5_board_init(void)
 		imx_iomux_v3_setup_multiple_pads(stk5_jtag_pads, ARRAY_SIZE(stk5_jtag_pads));
 	}
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 }
 
 static void stk5v3_board_init(void)
 {
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 	stk5_board_init();
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 	tx6ul_mmc_init();
 }
 
@@ -1432,7 +1432,7 @@ int board_late_init(void)
 {
 	const char *baseboard;
 
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	env_cleanup();
 
@@ -1495,7 +1495,7 @@ int board_late_init(void)
 	}
 
 exit:
-	debug("%s@%d: \n", __func__, __LINE__);
+	debug_karo("%s@%d: \n", __func__, __LINE__);
 
 	clear_ctrlc();
 	return 0;
@@ -1537,12 +1537,12 @@ void imx_get_mac_from_fuse(int dev_id, unsigned char *mac)
 			printf("Failed to read MAC1 fuse\n");
 			return;
 		}
-		debug("read %08x from fuse 3\n", mac1);
+		debug_karo("read %08x from fuse 3\n", mac1);
 		if (fuse_read(4, 4, &mac2)) {
 			printf("Failed to read MAC2 fuse\n");
 			return;
 		}
-		debug("read %08x from fuse 4\n", mac2);
+		debug_karo("read %08x from fuse 4\n", mac2);
 		mac[0] = mac2 >> 24;
 		mac[1] = mac2 >> 16;
 		mac[2] = mac2 >> 8;
@@ -1554,7 +1554,7 @@ void imx_get_mac_from_fuse(int dev_id, unsigned char *mac)
 	default:
 		return;
 	}
-	debug("%s@%d: Done %d %pM\n", __func__, __LINE__, dev_id, mac);
+	debug_karo("%s@%d: Done %d %pM\n", __func__, __LINE__, dev_id, mac);
 }
 
 static void tx6ul_init_mac(void)
-- 
2.25.1

