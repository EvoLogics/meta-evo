diff --git a/drivers/power/reset/at91-reset.c b/drivers/power/reset/at91-reset.c
index b99769f8ab15..0d57bf1763cd 100644
--- a/drivers/power/reset/at91-reset.c
+++ b/drivers/power/reset/at91-reset.c
@@ -17,6 +17,7 @@
 #include <linux/of_address.h>
 #include <linux/platform_device.h>
 #include <linux/reboot.h>
+#include <linux/gpio/consumer.h>
 
 #include <soc/at91/at91sam9_ddrsdr.h>
 #include <soc/at91/at91sam9_sdramc.h>
@@ -48,6 +49,7 @@ enum reset_type {
 
 static void __iomem *at91_ramc_base[2], *at91_rstc_base;
 static struct clk *sclk;
+struct gpio_desc *board_reset_gpio = NULL;
 
 /*
 * unless the SDRAM is cleanly shutdown before we hit the
@@ -125,6 +127,18 @@ static int at91sam9g45_restart(struct notifier_block *this, unsigned long mode,
 	return NOTIFY_DONE;
 }
 
+static int sama5d2_roadrunner_evo_restart(struct notifier_block *this, unsigned long mode,
+			   void *cmd)
+{
+	if (board_reset_gpio != NULL && !IS_ERR(board_reset_gpio))
+		gpiod_set_value(board_reset_gpio, 1);
+
+	writel(cpu_to_le32(AT91_RSTC_KEY | AT91_RSTC_PERRST | AT91_RSTC_PROCRST),
+		   at91_rstc_base);
+
+	return NOTIFY_DONE;
+}
+
 static int sama5d3_restart(struct notifier_block *this, unsigned long mode,
 			   void *cmd)
 {
@@ -183,6 +197,7 @@ static const struct of_device_id at91_reset_of_match[] = {
 	{ .compatible = "atmel,at91sam9g45-rstc", .data = at91sam9g45_restart },
 	{ .compatible = "atmel,sama5d3-rstc", .data = sama5d3_restart },
 	{ .compatible = "atmel,samx7-rstc", .data = samx7_restart },
+	{ .compatible = "atmel,sama5d2-roadrunner-evo-rstc", .data = sama5d2_roadrunner_evo_restart },
 	{ /* sentinel */ }
 };
 MODULE_DEVICE_TABLE(of, at91_reset_of_match);
@@ -219,6 +234,15 @@ static int __init at91_reset_probe(struct platform_device *pdev)
 	match = of_match_node(at91_reset_of_match, pdev->dev.of_node);
 	at91_restart_nb.notifier_call = match->data;
 
+	board_reset_gpio = devm_gpiod_get(&pdev->dev, "board-reset", GPIOD_ASIS);
+	if (!IS_ERR(board_reset_gpio)) {
+		if (gpiod_direction_output(board_reset_gpio, 0)) {
+			board_reset_gpio = NULL;
+		}
+	} else {
+		board_reset_gpio = NULL;
+	}
+
 	sclk = devm_clk_get(&pdev->dev, NULL);
 	if (IS_ERR(sclk))
 		return PTR_ERR(sclk);
