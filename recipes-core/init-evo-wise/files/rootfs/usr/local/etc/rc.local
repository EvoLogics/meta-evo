#!/bin/sh
# init script called once at first boot from /sbin/init

echo '=== First boot initial setup start ==='
touch /tmp/init-setup.lock

mount -o remount,rw /

#exec > /home/root/rc.local.log 2>&1
#set -x

[ -d /run ] && rmdir /run
ln -sf /var/volatile/run /run

# make bash history permanent
touch /data/.bash_history
ln -sf /data/.bash_history /home/root/.bash_history
xzcat /usr/share/evo-configs/bashrc.xz    > /home/root/.bashrc
xzcat /usr/share/evo-configs/screenrc.xz  > /home/root/.screenrc
xzcat /usr/share/evo-configs/tmux.conf.xz > /home/root/.tmux.conf

mkdir -p /media/card

DROPBEAR_RSAKEY=/etc/dropbear/dropbear_rsa_host_key
if [ ! -f $DROPBEAR_RSAKEY ]; then
    dropbearkey -t rsa -f $DROPBEAR_RSAKEY
fi
dropbear -r $DROPBEAR_RSAKEY
cd /

HWTYPE=$(evo-hw -q type)
IMAGE_VERSION=XXXXX
echo roadrunner-evo-$HWTYPE $IMAGE_VERSION > /etc/hwrevision

# FIXME: move it to init-evo-wise
# create shadow. base-passwd did't create shadow file
# it's created by 'shadow' package, what we don't need.
# busybox shadow support used
awk -F: '{print $1":*:0:0:99999:7:::"}' /etc/passwd > /etc/shadow
chmod 400 /etc/shadow

echo config::0:0:FW Config Shell,,,:/tmp:/usr/local/bin/sersh >> /etc/passwd
echo config::0:0:99999:7::: >> /etc/shadow
echo /usr/local/bin/sersh >> /etc/shells

echo upgrade::0:0:Upgrade System Shell,,,:/tmp:/sbin/eush >> /etc/passwd
echo upgrade::0:0:99999:7::: >> /etc/shadow
echo /sbin/eush >> /etc/shells

# create fake root for loging to sandbox via serial interface
printf 'evologics\nevologics\n' | adduser -u 10000 -g 10000 -H -h /opt/lxc/sandbox/rootfs -s /usr/bin/lxc-login-sh rename-me
sed -i -e 's/^root:/toor:/;s/^rename-me:/root:/' /etc/passwd
sed -i -e 's/^root:/toor:/;s/^rename-me:/root:/' /etc/shadow
sed -i -e 's/^root:/toor:/;s/^rename-me:/root:/' /etc/group

printf 'ppp\nppp\n' | adduser -u 42424 -g 42424 -s /usr/sbin/ppp-login ppp
sed -i '/^ppp:/s/42424/0/g' /etc/passwd
sed -i '/^ppp:/s/42424/0/g' /etc/group
echo /usr/sbin/ppp-login >> /etc/shells
touch /home/ppp/.hushlogin

SN="$(fw_printenv serial\# | sed 's,.*=,,')"
NUM="${SN%/*}"
NUM_HEX="$(printf "%02x" $NUM)"
SR="${SN#*/}"
SR_HEX="$(printf "%02x" $SR)"

echo Serial Number: $SN
case "$NUM" in
    [0-9]*)
        ifconfig eth0 192.168.0.$NUM
        if [ "$NUM" -gt 1 -a "$NUM" -lt 254 ]; then
            #sed -i -e 's/\(IPADDRDEF=\).*/\1192.168.0.'$NUM'/' \
            #       -e 's/\(IPADDRDEF_USB=\).*/\110.'"$SR.$NUM"'.1/' \
            #       -e 's/\(MAC_USB_DEV=\).*/\1ba:be:00:00:'$SR_HEX:$NUM_HEX'/' \
            #       -e 's/\(MAC_USB_HOST=\).*/\1ba:be:01:00:'$SR_HEX:$NUM_HEX'/' \
            #           /sbin/init

            sed -i -e 's/\(^start\).*/\1 10.'"$SR.$NUM"'.2/' \
                   -e 's/\(^end\).*/\1 10.'"$SR.$NUM"'.20/' \
                       /etc/udhcpd.conf
        else
            echo "Warning: SN is not a number not in range: $NUM"
        fi
        ;;
    *)
        echo "Warning: SN is not a number: $NUM"
        ;;
esac

HOSTNAME=evo-base-$NUM-$SR-$HWTYPE
echo $HOSTNAME > /etc/hostname
echo 127.0.0.1 $HOSTNAME              >> /etc/hosts
echo 192.168.42.1 sandbox sb lxc      >> /etc/hosts
echo 192.168.0.192 repos.evologics.de >> /etc/hosts
echo 'telnet stream tcp nowait toor /usr/sbin/telnetd telnetd -i' >> /etc/inetd.conf

# needed for sersh 'ip' command
ln -s /sbin/ip /bin/ip

case "$(evo-hw hwrev)" in
    r2-eth) ;;
    *) chmod -x /usr/local/etc/rc-post.d/99-hwtype_autoconfig.sh;;
esac

# emulate sandbox, evo-sandbox will care about
touch /opt/lxc/sandbox/enable
evo-sandbox -n base

# FIXME: sometimes mount to ro fails. 'busy'. why?
# remove self
( sleep 2 && \
    rm -f /usr/local/etc/rc.local && \
        mount -o remount,ro /; \
            printf '\n=== First boot initial setup ends ===\n' && \
                rm /tmp/init-setup.lock ) &

