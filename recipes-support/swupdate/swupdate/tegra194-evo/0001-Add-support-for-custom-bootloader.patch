From 19dd1922dc7a0f6e354f1bdbcb588ffa615b30d7 Mon Sep 17 00:00:00 2001
From: llewellyn-evo <llewellyn.fernandes@evologics.de>
Date: Mon, 8 Aug 2022 14:45:04 +0200
Subject: [PATCH] Add support for custom bootloader

---
 bootloader/Config.in | 18 ++++++++++++++
 bootloader/Makefile  |  7 +++---
 bootloader/custom.c  | 67 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 89 insertions(+), 3 deletions(-)
 create mode 100644 bootloader/custom.c

diff --git a/bootloader/Config.in b/bootloader/Config.in
index ad9fec1..e496ea3 100644
--- a/bootloader/Config.in
+++ b/bootloader/Config.in
@@ -42,6 +42,11 @@ config BOOTLOADER_GRUB
 	help
 	  Support for GRUB
 	  https://www.gnu.org/software/grub/
+
+config BOOTLOADER_CUSTOM
+  bool "CUSTOM"
+  help
+    Support for custom bootloader interface
 endchoice
 
 config UBOOT_FWENV
@@ -95,3 +100,16 @@ config GRUBENV_PATH
 	default "/boot/efi/EFI/BOOT/grub/grubenv"
 	help
 	  Provide path to GRUB environment block file
+
+
+config BOOTLOADER_CUSTOM_COMMAND
+  string "Command for interfacing with custom bootloader"
+  depends on BOOTLOADER_CUSTOM
+  default "/usr/sbin/swupdate-bootloader-interface"
+  help
+    Provide path to binary for getting and setting
+    bootloader variables. The command should take
+    up to 3 arguments: command (get/set/unset/apply),
+    for get/set/unset, the variable name (for apply,
+    the name of the file containing var=value lines),
+    and for set commands, the value.
diff --git a/bootloader/Makefile b/bootloader/Makefile
index ff56387..1e13906 100644
--- a/bootloader/Makefile
+++ b/bootloader/Makefile
@@ -2,7 +2,8 @@
 #
 # SPDX-License-Identifier:     GPL-2.0-only
 #
-lib-$(CONFIG_UBOOT)		+= uboot.o
-lib-$(CONFIG_BOOTLOADER_NONE)	+= none.o
-lib-$(CONFIG_BOOTLOADER_GRUB)	+= grub.o
+lib-$(CONFIG_UBOOT)							+= uboot.o
+lib-$(CONFIG_BOOTLOADER_NONE)		+= none.o
+lib-$(CONFIG_BOOTLOADER_GRUB)		+= grub.o
 lib-$(CONFIG_BOOTLOADER_EBG)		+= ebg.o
+lib-$(CONFIG_BOOTLOADER_CUSTOM) += custom.o
diff --git a/bootloader/custom.c b/bootloader/custom.c
new file mode 100644
index 0000000..8f8a351
--- /dev/null
+++ b/bootloader/custom.c
@@ -0,0 +1,67 @@
+#include <unistd.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include "bootloader.h"
+#include "swupdate_dict.h"
+
+static const char bootloader_cmd[] = CONFIG_BOOTLOADER_CUSTOM_COMMAND;
+
+static int run_cmd(const char *op, const char *name,
+  const char  *value)
+{
+  char cmdbuf[1024];
+  ssize_t n;
+
+  if (value)
+    n = snprintf(cmdbuf, sizeof(cmdbuf)-1, "%s %s %s \"%s\"",
+      bootloader_cmd, op, name, value);
+  else
+    n = snprintf(cmdbuf, sizeof(cmdbuf)-1, "%s %s %s",
+      bootloader_cmd, op, name);
+  if (n < 0)
+    return n;
+  cmdbuf[n] = '\0';
+  return system(cmdbuf);
+
+}
+
+int bootloader_env_set(const char *name, const char *value)
+{
+  return run_cmd("set", name, value);
+}
+
+int bootloader_env_unset(const char *name)
+{
+  return run_cmd("unset", name, NULL);
+}
+
+char *bootloader_env_get(const char  *name)
+{
+  char cmdbuf[1024];
+  FILE *pipein;
+  ssize_t n;
+  size_t len;
+
+  n = snprintf(cmdbuf, sizeof(cmdbuf)-1, "%s get %s",
+    bootloader_cmd, name);
+  if (n < 0)
+    return NULL;
+  cmdbuf[n] = '\0';
+  pipein = popen(cmdbuf, "r");
+  if (!pipein)
+    return NULL;
+  len = fread(cmdbuf, sizeof(cmdbuf[0]), sizeof(cmdbuf)/sizeof(cmdbuf[0])-1, pipein);
+  if (pclose(pipein))
+    return NULL;
+  while (len > 0 && cmdbuf[len] == '\n')
+    len--;
+  cmdbuf[len] = '\0';
+  return strdup(cmdbuf);
+}
+
+int bootloader_apply_list(const char *filename)
+{
+  return run_cmd("apply", filename, NULL);
+}
+
