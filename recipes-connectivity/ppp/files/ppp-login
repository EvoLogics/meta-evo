#!/bin/sh
# vim: ft=tcl
#
# the next line restarts using expect \
    [ -e /opt/lxc/sandbox/enable ] && LC_CTYPE=C exec expect -f "$0" -- "$@"; \
    stty raw -echo -crtscts;           \
    exec pppd nodetach nopersist


################################
# /etc/ppp/options
################################
## uncomment to debug
##debug
##logfile /var/log/pppd.log
##record /var/log/pppd.dump
#
#115200
#lock
#noauth
#nodetach
#notty
#xonxoff
#asyncmap FFFFFFFF
#escape FF
################################

array set ::opt {
    verbose       0
}

remove_nulls -d 0
remove_nulls 0
log_user 0

# NOTE: problems with binary data in stdin/stdout
#   * fconfigure do not help
#   * send_user corrupt binary data, use puts -nonewline
#
# TODO: try it again
fconfigure stdin  -encoding binary -translation binary -buffering none -blocking 0
fconfigure stdout -encoding binary -translation binary -buffering none -blocking 0
stty raw -echo
encoding system iso8859-1

set fout [exp_open -leaveopen -i $user_spawn_id]
#fconfigure $fout -encoding binary -translation binary -buffering none -blocking 0
fconfigure $fout -translation binary -buffering none -blocking 0
spawn -noecho -open $fout
set user_spawn_id $spawn_id
#stty raw -echo

match_max 2000
set timeout -1

############## start: help function ######################
array set c {
    none  "\033\[0m"
    red   "\033\[0;31m"
    lred  "\033\[1;31m"
    grn   "\033\[0;32m"
    lgrn  "\033\[1;32m"
    yel   "\033\[0;33m"
    lyel  "\033\[1;33m"
    mag   "\033\[0;35m"
    lmag  "\033\[1;35m"
    lblue "\033\[1;36m"
    cyan  "\033\[0;36m"
    white "\033\[1;37m"
}

proc die {msg} {
    upvar c c
    puts stderr "die: $c(lred)$msg$c(none)"
    exit 1
}

#proc fail {msg} {
#    upvar c c
#    puts -nonewline " $c(lred)fail:\n$msg$c(none)"
#    flush stdout
#}
#
#proc warn {msg} {
#    upvar c c
#    puts -nonewline $c(yel)$msg$c(none)
#    flush stdout
#}
#
#proc msg {msg} {
#    upvar c c
#    puts -nonewline $c(cyan)$msg$c(none)
#    flush stdout
#}

# TODO: loglevel
proc msg {type msg} {
    upvar c c
    switch $type {
        fail    {set col $c(lred)}
        warn    {set col $c(lmag)}
        note    {set col $c(lyel)}
        info    {set col $c(cyan)}
        dbg     {set col $c(lmag)}
        norm    {set col {}}
        stage   {
            set col $c(yel)
            set msg "\n====== $msg ======\n"
        }
        default {set col {}}
    }
    puts -nonewline $col$msg$c(none)
    flush stdout
}

proc ok {} {
    upvar c c
    puts " $c(lgrn) ok$c(none)"
}

proc hexdump string {
    binary scan $string H* hex
    regexp -all -inline .. $hex
}

proc beep {} {
    after 0 {
        send_tty "\x07"
        for {set i 0} {$i < 5} {incr i} {
            sleep 1
            send_tty "\x07"
        }
    }
}

proc check_for_following {type} {
    global argv0
    if {![llength [uplevel set argv]]} {
        send_error "$argv0: [uplevel set flag] requires following $type"
        exit 2
    }
}

############## end: help function ######################

proc show_help_and_die {} {
    global argv0 image_types
    send_error "Usage: [regsub .*/ $argv0 {}] \[-h|--help] \[--] \n\
    -h  - this help\n\
    "
    exit 1
}

while { [llength $argv] > 0 } {
    set flag [lindex $argv 0]
    if {0 == [regexp "^-" $flag]} break
    set argv [lrange $argv 1 end]
    switch -- $flag {
        #-f   { set opt(file) [lindex $argv 0]; check_for_following string; set argv [lrange $argv 1 end] }
        -v    { set opt(verbose) 1 }
        -h -
        --help { show_help_and_die }
        --    { incr i; break }
        ^-      { die "unknown option: \"$flag\"" }
    }
}

set argv [string trim $argv \{\}]
set argc [llength $argv]

#if {$argc != 1} {
#    show_help_and_die
#}
set prompt {# }
set fake_prompt "DeaDBeaF# "

set cmd "stty raw -echo; PS1=\"$fake_prompt\"; pppd nodetach nopersist"

spawn -noecho lxc-console -n sandbox -e -

sleep 1
send -- \n

set count 3

expect -timeout 3 {Ctrl+a itself} {
    exp_continue
} $prompt {

    send -- $cmd\n
    expect -timeout 1 -re .+ {
        exp_continue
    } timeout {
    }

} timeout {
    incr count -1

    if {$count == 0} {
        die "lxc-console do not answer"
    }
    send -- \n

    exp_continue
} full_buffer {
    exp_continue
} eof {
}

expect -i $user_spawn_id -re .+ {
    send -raw -i $spawn_id -- $expect_out(buffer)
    exp_continue
} -i $spawn_id -re $fake_prompt {
    send -- logout\n
} -i $spawn_id -re .+ {
    #send -raw -i $user_spawn_id -- $expect_out(buffer)
    puts -nonewline $expect_out(buffer)
    exp_continue
} eof {
}

#interact -nobuffer eof {} -o \
#    -iwrite -re $fake_prompt {
#        return
#    } eof {
#    }

#send -- \x01q

expect -timeout 1 -re .+ exp_continue timeout {}

exp_close
wait


